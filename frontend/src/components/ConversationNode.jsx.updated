import React, { useState, useCallback, useEffect, useRef, useMemo } from 'react';
import { Handle, Position } from 'reactflow';
import { Button } from "./ui/button";
import { Input } from "./ui/input";
import { Label } from "./ui/label";
import { Card, CardContent } from "@/components/ui/card";
import { 
  Settings2, 
  MessageCircle, 
  Users, 
  ChevronDown, 
  ChevronUp,
  Bot,
  User,
  Loader,
  AlertCircle,
  X,
  Plus,
  MoreVertical
} from 'lucide-react';
import PropertyPanel from './PropertyPanel';

const handleParticipantChange = useCallback((participantId, changes) => {
      if (data.onChange) {
        const updatedParticipants = participants.map(p => {
          if (p.id === participantId) {
            // Create a new object with all existing properties and changes
            return {
              ...p,
              ...changes,
              // Ensure model and other important properties are preserved
              model: changes.model || p.model,
              apiKeyId: changes.apiKeyId || p.apiKeyId,
              temperature: changes.temperature || p.temperature,
              maxTokens: changes.maxTokens || p.maxTokens,
            };

const renderParticipantList = useCallback(() => {
    return participants.map((agent) => (
      <div
        key={agent.id}
        className="flex items-center justify-between bg-gray-50 p-2 rounded-md"
        onClick={(e) => e.stopPropagation()}
      >
        <div className="flex items-center gap-2">
          {agent.type === 'ai' ? (
            <Bot className="w-4 h-4 text-blue-500" />
          ) : (
            <User className="w-4 h-4 text-green-500" />
          )}
          <span className="text-sm font-medium">{agent.name}</span>
          <span className="text-xs text-gray-500">
            ({getRoleDisplay(agent.role)})
          </span>
        </div>
        <div className="flex gap-2">
          <Button
            variant="ghost"
            size="sm"
            onClick={(e) => handleParticipantConfig(e, agent)}
            title="Configure Agent"
          >
            <Settings2 className="w-4 h-4 text-gray-500" />
          </Button>
          <Button
            variant="ghost"
            size="sm"
            onClick={(e) => handleRemoveParticipant(e, agent.id)}
            title="Remove Agent"
          >
            <X className="w-4 h-4 text-gray-500" />
          </Button>
        </div>
      </div>
    ));
  }, [participants, handleParticipantConfig, handleRemoveParticipant]);



const handleParticipantChange = useCallback((participantId, changes) => {
    if (data?.onChange) {
      const updatedParticipants = participants.map(p => {
        if (p.id === participantId) {
          return {
            ...p,
            ...changes,
            model: changes.model || p.model,
            apiKeyId: changes.apiKeyId || p.apiKeyId,
            temperature: changes.temperature || p.temperature,
            maxTokens: changes.maxTokens || p.maxTokens,
          };
        }
        return p;
      });
      
      console.log('Updating participant:', participantId, {
        original: participants.find(p => p.id === participantId),
        changes,
        updated: updatedParticipants.find(p => p.id === participantId)
      });
      
      data.onChange(id, { agents: updatedParticipants });
    }
  }, [data?.onChange, id, participants]);



const handleRemoveParticipant = useCallback((event, agentId) => {
    event.stopPropagation();
    if (data?.onChange) {
      const newAgents = participants.filter(p => p.id !== agentId);
      data.onChange(id, { agents: newAgents });
    }
  }, [data, id, participants]);



const handleParticipantConfig = useCallback((event, participant) => {
    // Stop the event from bubbling up to the node click handler
    event.stopPropagation();
    setSelectedParticipant(participant);
    setShowParticipantConfig(true);
  }, []);



const renderParticipantList = useCallback(() => {
      return participants.map((agent) => (
        <div
          key={agent.id}
          className="flex items-center justify-between bg-gray-50 p-2 rounded-md"
          onClick={(e) => e.stopPropagation()} // Stop clicks on the container
        >
          <div className="flex items-center gap-2">
            {agent.type === 'ai' ? (
              <Bot className="w-4 h-4 text-blue-500" />
            ) : (
              <User className="w-4 h-4 text-green-500" />
            )}
            <span className="text-sm font-medium">{agent.name}</span>
            <span className="text-xs text-gray-500">
              ({getRoleDisplay(agent.role)})
            </span>
          </div>
          <div className="flex gap-2">
            <Button
              variant="ghost"
              size="sm"
              onClick={(e) => handleParticipantConfig(e, agent)}
              title="Configure Agent"
            >
              <Settings2 className="w-4 h-4 text-gray-500" />
            </Button>
            <Button
              variant="ghost"
              size="sm"
              onClick={(e) => handleRemoveParticipant(e, agent.id)}
              title="Remove Agent"
            >
              <X className="w-4 h-4 text-gray-500" />
            </Button>
          </div>
        </div>
      ));
    }, [participants, handleParticipantConfig, handleRemoveParticipant]);


          }
          return p;
        });
        
        console.log('Updating participant:', participantId, {
          original: participants.find(p => p.id === participantId),
          changes,
          updated: updatedParticipants.find(p => p.id === participantId)
        });
        
        data.onChange(id, { agents: updatedParticipants });
      }
    }, [data.onChange, id, participants]);



const handleRemoveParticipant = useCallback((event, agentId) => {
      event.stopPropagation();
      if (data.onChange) {
        const newAgents = participants.filter(p => p.id !== agentId);
        data.onChange(id, { agents: newAgents });
      }
    }, [data, id, participants]);



const handleParticipantConfig = useCallback((event, participant) => {
      // Stop the event from bubbling up to the node click handler
      event.stopPropagation();
      setSelectedParticipant(participant);
      setShowParticipantConfig(true);
    }, []);



// Helper function to handle role display
const getRoleDisplay = (role) =>


  // Memoized values
  const participants = useMemo(() => data?.agents || [], [data?.agents]);
  const conversationMode = useMemo(() => data?.mode || 'free-form', [data?.mode]);
  const allowHumanParticipation = useMemo(() => data?.allowHumanParticipation !== false, [data?.allowHumanParticipation]);
  const turnManagement = useMemo(() => data?.turnManagement || 'dynamic', [data?.turnManagement]);
  const contextHandling = useMemo(() => data?.contextHandling || 'cumulative', [data?.contextHandling]);

 {
  if (!role) return 'No role defined';
  if (typeof role === 'string') return role;
  if (typeof role === 'object') {
    if (role.type === 'custom' && role.customRole) {
      return role.customRole;
    }
    return role.type || 'Custom Role';
  }
  return 'Unknown Role';
};

const ConversationNode = ({ id, data, isConnectable }) => {
  // State
  const [expanded, setExpanded] = useState(false);
  const [showSettings, setShowSettings] = useState(false);
  const [showParticipantMenu, setShowParticipantMenu] = useState(false);
  const [inputMessage, setInputMessage] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);
  const [isDraggingOver, setIsDraggingOver] = useState(false);
  const [messages, setMessages] = useState([]);
  const [selectedParticipant, setSelectedParticipant] = useState(null);
  const [showParticipantConfig, setShowParticipantConfig] = useState(false);
  
  // Refs
  const messagesEndRef = useRef(null);
  const inputRef = useRef(null);

  // Memoized values
  const participants = useMemo(() => data.agents || [], [data.agents]);
  const conversationMode = useMemo(() => data.mode || 'free-form', [data.mode]);

  // Auto-scroll to bottom when new messages arrive
  const scrollToBottom = useCallback(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, []);

  useEffect(() => {
    scrollToBottom();
  }, [messages, scrollToBottom]);

  // Initialize or update conversation settings
  useEffect(() => {
    if (data.onChange) {
      data.onChange(id, {
        mode: conversationMode,
        allowHumanParticipation: data.allowHumanParticipation !== false,
        turnManagement: data.turnManagement || 'dynamic',
        contextHandling: data.contextHandling || 'cumulative'
      });
    }
  }, [id, data.onChange, conversationMode]);

  // Participant Management
  const handleAddParticipant = useCallback((agent) => {
    if (data.onChange && !participants.some(p => p.id === agent.id)) {
      const newAgents = [...participants, agent];
      data.onChange(id, { agents: newAgents });
    }
  }, [data, id, participants]);

  const handleRemoveParticipant = useCallback((agentId) => {
    if (data.onChange) {
      const newAgents = participants.filter(p => p.id !== agentId);
      data.onChange(id, { agents: newAgents });
    }
  }, [data, id, participants]);

  const handleParticipantChange = useCallback((participantId, changes) => {
    if (data.onChange) {
      const updatedParticipants = participants.map(p => 
        p.id === participantId ? { ...p, ...changes } : p
      );
      data.onChange(id, { agents: updatedParticipants });
    }
  }, [data.onChange, id, participants]);

  const handleParticipantConfig = useCallback((participant) => {
    setSelectedParticipant(participant);
    setShowParticipantConfig(true);
  }, []);

  // Drag and Drop handlers
  const handleDragOver = useCallback((e) => {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'copy';
    setIsDraggingOver(true);
  }, []);

  const handleDragLeave = useCallback(() => {
    setIsDraggingOver(false);
  }, []);

  const handleDrop = useCallback((e) => {
    e.preventDefault();
    setIsDraggingOver(false);
    try {
      const agentData = JSON.parse(e.dataTransfer.getData('application/reactflow'));
      if (agentData.type === 'aiAgent' || agentData.type === 'humanAgent') {
        // Generate a unique ID for the participant
        const participantId = `${agentData.type}-${Date.now()}`;
        const newParticipant = {
          id: participantId,
          type: agentData.type === 'aiAgent' ? 'ai' : 'human',
          name: agentData.data.name || `New ${agentData.type === 'aiAgent' ? 'AI' : 'Human'} Agent`,
          ...agentData.data
        };
        handleAddParticipant(newParticipant);
        // Prevent the default node creation behavior
        e.stopPropagation();
      }
    } catch (error) {
      console.error('Error handling drop:', error);
    }
  }, [handleAddParticipant]);

  // Message handling
  const handleSendMessage = useCallback(async () => {
    if (!inputMessage.trim() || isProcessing) return;

    setIsProcessing(true);
    try {
      // Add user message
      const userMessage = {
        id: Date.now(),
        content: inputMessage.trim(),
        sender: 'User',
        role: 'user',
        timestamp: new Date().toISOString()
      };
      
      setMessages(prev => [...prev, userMessage]);
      setInputMessage('');

      // Process with active agents based on conversation mode
      switch (conversationMode) {
        case 'round-robin':
          for (const agent of participants) {
            await processAgentResponse(agent, [...messages, userMessage]);
          }
          break;

        case 'moderated':
          if (participants.length > 0) {
            const moderator = participants[0];
            const decision = await processModeratorDecision(moderator, [...messages, userMessage]);
            for (const agentId of decision) {
              const agent = participants.find(a => a.id === agentId);
              if (agent) {
                await processAgentResponse(agent, [...messages, userMessage]);
              }
            }
          }
          break;

        case 'free-form':
        default:
          await Promise.all(participants.map(agent => 
            processAgentResponse(agent, [...messages, userMessage])
          ));
          break;
      }

    } catch (error) {
      console.error('Error in conversation:', error);
      if (data.onChange) {
        data.onChange(id, { error: error.message });
      }
    } finally {
      setIsProcessing(false);
      inputRef.current?.focus();
    }
  }, [inputMessage, isProcessing, messages, participants, conversationMode, data, id]);

  const processAgentResponse = async (agent, messageHistory) => {
    try {
      const response = await fetch('http://localhost:3000/api/openai', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          apiKeyId: agent.apiKeyId,
          model: agent.model || 'gpt-3.5-turbo',
          messages: [
            {
              role: 'system',
              content: generateAgentInstructions(agent)
            },
            ...messageHistory.map(m => ({
              role: m.role,
              content: m.content
            }))
          ],
          temperature: agent.temperature || 0.7,
          maxTokens: agent.maxTokens || 150
        }),
      });

      if (!response.ok) throw new Error('Failed to get agent response');
      
      const data = await response.json();
      const content = data.choices[0].message.content;

      const agentMessage = {
        id: Date.now(),
        content,
        sender: agent.name,
        role: 'assistant',
        timestamp: new Date().toISOString()
      };

      setMessages(prev => [...prev, agentMessage]);
      return content;

    } catch (error) {
      console.error(`Error processing agent ${agent.name}:`, error);
      throw error;
    }
  };

  const generateAgentInstructions = (agent) => {
    const baseInstructions = agent.instructions || 'You are a helpful assistant.';
    const roleContext = `You are acting as ${getRoleDisplay(agent.role)}.`;
    const conversationContext = `You are participating in a ${conversationMode} conversation with multiple agents.`;
    
    return `${baseInstructions}\n\n${roleContext}\n\n${conversationContext}`;
  };

  const handleKeyPress = useCallback((e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  }, [handleSendMessage]);

  // Message rendering
  const renderMessage = useCallback((message) => {
    const getMessageStyle = () => {
      switch (message.role) {
        case 'user':
          return 'bg-blue-50 border-blue-200';
        case 'assistant':
          return 'bg-green-50 border-green-200';
        case 'system':
          return 'bg-gray-50 border-gray-200';
        default:
          return 'bg-white border-gray-200';
      }
    };

    

return ({showParticipantConfig && selectedParticipant && (
    <PropertyPanel
      node={{
        id: selectedParticipant.id,
        type: selectedParticipant.type === 'ai' ? 'aiAgent' : 'humanAgent',
        data: {
          ...selectedParticipant,
          onChange: (id, changes) => handleParticipantChange(id, changes)
        }
      }}
      onChange={(_, changes) => handleParticipantChange(selectedParticipant.id, changes)}
      onClose={(e) => {
        e?.stopPropagation();
        setShowParticipantConfig(false);
        setSelectedParticipant(null);
      }}
      apiKeys={data?.apiKeys}
    />
  )})

return (
      <div
        key={message.id}
        className={`p-3 rounded-lg border mb-2 ${getMessageStyle()}`}
      >
        <div className="flex justify-between items-center mb-1">
          <div className="flex items-center gap-2">
            {message.role === 'assistant' ? (
              <Bot className="w-4 h-4 text-green-500" />
            ) : message.role === 'user' ? (
              <User className="w-4 h-4 text-blue-500" />
            ) : (
              <MessageCircle className="w-4 h-4 text-gray-500" />
            )}
            <span className="text-sm font-medium">{message.sender}</span>
          </div>
          <span className="text-xs text-gray-500">
            {new Date(message.timestamp).toLocaleTimeString()}
          </span>
        </div>
        <div className="text-sm whitespace-pre-wrap">{message.content}</div>
      </div>
    );
  }, []);

  // Render participant list
  const renderParticipantList = useCallback(() => {
    return participants.map((agent) => (
      <div
        key={agent.id}
        className="flex items-center justify-between bg-gray-50 p-2 rounded-md"
      >
        <div className="flex items-center gap-2">
          {agent.type === 'ai' ? (
            <Bot className="w-4 h-4 text-blue-500" />
          ) : (
            <User className="w-4 h-4 text-green-500" />
          )}
          <span className="text-sm font-medium">{agent.name}</span>
          <span className="text-xs text-gray-500">
            ({getRoleDisplay(agent.role)})
          </span>
        </div>
        <div className="flex gap-2">
          <Button
            variant="ghost"
            size="sm"
            onClick={() => handleParticipantConfig(agent)}
            title="Configure Agent"
          >
            <Settings2 className="w-4 h-4 text-gray-500" />
          </Button>
          <Button
            variant="ghost"
            size="sm"
            onClick={() => handleRemoveParticipant(agent.id)}
            title="Remove Agent"
          >
            <X className="w-4 h-4 text-gray-500" />
          </Button>
        </div>
      </div>
    ));
  }, [participants, handleParticipantConfig, handleRemoveParticipant]);

  return (
    <>
      <div className="conversation-node bg-white border border-gray-200 rounded-lg shadow-lg w-96">
        <Handle
          type="target"
          position={Position.Top}
          style={{ background: '#555' }}
          isConnectable={isConnectable}
        />

        <div className="p-4">
          {/* Header */}
          <div className="flex justify-between items-center mb-4">
            <div className="flex items-center gap-2">
              <Users className="w-5 h-5 text-gray-500" />
              <h3 className="text-lg font-semibold">
                {data.label || 'Multi-Agent Conversation'}
              </h3>
            </div>
            <div className="flex gap-2">
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setShowSettings(!showSettings)}
              >
                <Settings2 className="w-4 h-4" />
              </Button>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setExpanded(!expanded)}
              >
                {expanded ? (
                  <ChevronUp className="w-4 h-4" />
                ) : (
                  <ChevronDown className="w-4 h-4" />
                )}
              </Button>
            </div>
          </div>

          {/* Settings Panel */}
          {showSettings && (
            <Card className="mb-4">
              <CardContent className="p-4 space-y-4">
                <div>
                  <Label>Conversation Mode</Label>
                  <select
                    value={data.mode || 'free-form'}
                    onChange={(e) => data.onChange?.(id, { mode: e.target.value })}
                    className="w-full mt-1 border rounded p-2 text-sm"
                  >
                    <option value="free-form">Free-form</option>
                    <option value="round-robin">Round-robin</option>
                    <option value="moderated">Moderated</option>
                  </select>
                </div>
                
                <div>
                  <Label>Context Handling</Label>
                  <select
                    value={data.contextHandling || 'cumulative'}
                    onChange={(e) => data.onChange?.(id, { contextHandling: e.target.value })}
                    className="w-full mt-1 border rounded p-2 text-sm"
                  >
                    <option value="cumulative">Cumulative</option>
                    <option value="reset">Reset Each Time</option>
                    <option value="window">Sliding Window</option>
                  </select>
                </div>

                <div className="flex items-center gap-2">
                  <input
                    type="checkbox"
                    id="allowHuman"
                    checked={data.allowHumanParticipation !== false}
                    onChange={(e) => data.onChange?.(id, { allowHumanParticipation: e.target.checked })}
                    />
                    <Label htmlFor="allowHuman">Allow Human Participation</Label>
                  </div>
                </CardContent>
              </Card>
            )}
  
            {/* Participants */}
            <div className="mb-4">
              <div className="flex justify-between items-center mb-2">
                <Label className="font-medium">Participants</Label>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setShowParticipantMenu(!showParticipantMenu)}
                >
                  <Plus className="w-4 h-4 mr-1" />
                  Add Participant
                </Button>
              </div>
  
              <div className="space-y-2">
                {renderParticipantList()}
              </div>
  
              {showParticipantMenu && (
                <Card className="mt-2">
                  <CardContent className="p-4">
                    <Label className="mb-2 block">Add Participants</Label>
                    
                    <div className="flex gap-2 mb-4">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => data.onCreateAgent?.('ai')}
                      >
                        <Bot className="w-4 h-4 mr-1" />
                        New AI Agent
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => data.onCreateAgent?.('human')}
                      >
                        <User className="w-4 h-4 mr-1" />
                        New Human
                      </Button>
                    </div>
  
                    <div 
                      className={`border-2 border-dashed rounded-md p-4 text-center
                        ${isDraggingOver ? 'border-blue-500 bg-blue-50' : 'border-gray-300'}
                      `}
                      onDragOver={handleDragOver}
                      onDragLeave={handleDragLeave}
                      onDrop={handleDrop}
                    >
                      <p className="text-sm text-gray-500">
                        Drag agents here to add them to the conversation
                      </p>
                    </div>
                  </CardContent>
                </Card>
              )}
            </div>
  
            {/* Expanded Content */}
            {expanded && (
              <>
                {/* Messages */}
                <div className="border rounded-lg mb-4">
                  <div className="max-h-60 overflow-y-auto p-3">
                    {messages.map(renderMessage)}
                    <div ref={messagesEndRef} />
                  </div>
                </div>
  
                {/* Input Area */}
                <div className="flex gap-2">
                  <Input
                    ref={inputRef}
                    value={inputMessage}
                    onChange={(e) => setInputMessage(e.target.value)}
                    onKeyPress={handleKeyPress}
                    placeholder="Type your message..."
                    disabled={isProcessing}
                    className="flex-grow"
                  />
                  <Button
                    onClick={handleSendMessage}
                    disabled={isProcessing || !inputMessage.trim()}
                  >
                    {isProcessing ? (
                      <Loader className="w-4 h-4 animate-spin" />
                    ) : (
                      'Send'
                    )}
                  </Button>
                </div>
  
                {/* Error Display */}
                {data.error && (
                  <div className="mt-2 text-sm text-red-500 flex items-center gap-1">
                    <AlertCircle className="w-4 h-4" />
                    <span>{data.error}</span>
                  </div>
                )}
              </>
            )}
          </div>
  
          <Handle
            type="source"
            position={Position.Bottom}
            style={{ background: '#555' }}
            isConnectable={isConnectable}
          />
        </div>
  
        {/* Property Panel for participant configuration */}
        {showParticipantConfig && selectedParticipant && (
          <PropertyPanel
            node={{
              id: selectedParticipant.id,
              type: selectedParticipant.type === 'ai' ? 'aiAgent' : 'humanAgent',
              data: selectedParticipant
            }}
            onChange={(_, changes) => handleParticipantChange(selectedParticipant.id, changes)}
            onClose={() => {
              setShowParticipantConfig(false);
              setSelectedParticipant(null);
            }}
            apiKeys={data.apiKeys}
          />
        )}
      </>
    );
  };
  
  const processModeratorDecision = async (moderator, messageHistory) => {
    try {
      const response = await fetch('http://localhost:3000/api/openai', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          apiKeyId: moderator.apiKeyId,
          model: moderator.model || 'gpt-3.5-turbo',
          messages: [
            {
              role: 'system',
              content: `You are a conversation moderator. Review the context and decide which agents should respond.
              Available agents: ${moderator.availableAgents?.map(a => `${a.id} (${a.role})`).join(', ')}.
              Respond with a JSON array of agent IDs that should participate.`
            },
            ...messageHistory.map(m => ({
              role: m.role,
              content: m.content
            }))
          ],
          temperature: 0.3,
          maxTokens: 100
        }),
      });
  
      if (!response.ok) throw new Error('Failed to get moderator decision');
      
      const data = await response.json();
      try {
        return JSON.parse(data.choices[0].message.content);
      } catch {
        return [];
      }
    } catch (error) {
      console.error('Error in moderator decision:', error);
      return [];
    }
  };
  
  export default ConversationNode;